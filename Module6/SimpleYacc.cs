// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  MIL8A-202A-06
// DateTime: 01.11.2019 21:47:34
// UserName: user
// Input file <SimpleYacc.y - 01.11.2019 21:33:26>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using ProgramTree;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,BEGIN=3,END=4,CYCLE=5,ASSIGN=6,
    SEMICOLON=7,REPEAT=8,UNTIL=9,WHILE=10,DO=11,IF=12,
    THEN=13,ELSE=14,FOR=15,TO=16,OPENP=17,CLOSEP=18,
    WRITE=19,VAR=20,COMMA=21,MINUS=22,PLUS=23,MULT=24,
    DELIM=25,LT=26,GT=27,LEQ=28,GEQ=29,INUM=30,
    RNUM=31,ID=32};

public struct ValueType
{ 
			public double dVal; 
			public int iVal; 
			public string sVal; 
			public Node nVal;
			public ExprNode eVal;
			public StatementNode stVal;
			public BlockNode blVal;
       }
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SimpleYacc.y - 01.11.2019 21:33:26
// Ýòè îáúÿâëåíèÿ äîáàâëÿþòñÿ â êëàññ GPPGParser, ïðåäñòàâëÿþùèé ñîáîé ïàðñåð, ãåíåðèðóåìûé ñèñòåìîé gppg
    public BlockNode root; // Êîðíåâîé óçåë ñèíòàêñè÷åñêîãî äåðåâà 
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y - 01.11.2019 21:33:26

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[32];
  private static State[] states = new State[59];
  private static string[] nonTerms = new string[] {
      "expr", "ident", "e0", "e1", "e2", "e3", "assign", "statement", "cycle", 
      "repeat", "while", "stlist", "block", "progr", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{3,4},new int[]{-14,1,-13,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{32,20,3,4,5,42,8,46,10,52},new int[]{-12,5,-8,50,-7,9,-2,10,-13,40,-9,41,-10,45,-11,51});
    states[5] = new State(new int[]{4,6,7,7});
    states[6] = new State(-3);
    states[7] = new State(new int[]{32,20,3,4,5,42,8,46,10,52},new int[]{-8,8,-7,9,-2,10,-13,40,-9,41,-10,45,-11,51});
    states[8] = new State(-10);
    states[9] = new State(-4);
    states[10] = new State(new int[]{6,11});
    states[11] = new State(new int[]{32,20,30,21,31,22,17,23},new int[]{-1,12,-3,13,-4,14,-5,26,-6,29,-2,19});
    states[12] = new State(-14);
    states[13] = new State(-15);
    states[14] = new State(new int[]{22,15,23,30,26,32,27,34,29,36,28,38,4,-16,7,-16,9,-16,18,-16,32,-16,3,-16,5,-16,8,-16,10,-16});
    states[15] = new State(new int[]{32,20,30,21,31,22,17,23},new int[]{-5,16,-6,29,-2,19});
    states[16] = new State(new int[]{24,17,25,27,22,-22,23,-22,26,-22,27,-22,29,-22,28,-22,4,-22,7,-22,9,-22,18,-22,32,-22,3,-22,5,-22,8,-22,10,-22});
    states[17] = new State(new int[]{32,20,30,21,31,22,17,23},new int[]{-6,18,-2,19});
    states[18] = new State(-25);
    states[19] = new State(-27);
    states[20] = new State(-13);
    states[21] = new State(-28);
    states[22] = new State(-29);
    states[23] = new State(new int[]{32,20,30,21,31,22,17,23},new int[]{-1,24,-3,13,-4,14,-5,26,-6,29,-2,19});
    states[24] = new State(new int[]{18,25});
    states[25] = new State(-30);
    states[26] = new State(new int[]{24,17,25,27,22,-21,23,-21,26,-21,27,-21,29,-21,28,-21,4,-21,7,-21,9,-21,18,-21,32,-21,3,-21,5,-21,8,-21,10,-21});
    states[27] = new State(new int[]{32,20,30,21,31,22,17,23},new int[]{-6,28,-2,19});
    states[28] = new State(-26);
    states[29] = new State(-24);
    states[30] = new State(new int[]{32,20,30,21,31,22,17,23},new int[]{-5,31,-6,29,-2,19});
    states[31] = new State(new int[]{24,17,25,27,22,-23,23,-23,26,-23,27,-23,29,-23,28,-23,4,-23,7,-23,9,-23,18,-23,32,-23,3,-23,5,-23,8,-23,10,-23});
    states[32] = new State(new int[]{32,20,30,21,31,22,17,23},new int[]{-5,33,-6,29,-2,19});
    states[33] = new State(new int[]{24,17,25,27,4,-17,7,-17,9,-17,18,-17,32,-17,3,-17,5,-17,8,-17,10,-17});
    states[34] = new State(new int[]{32,20,30,21,31,22,17,23},new int[]{-5,35,-6,29,-2,19});
    states[35] = new State(new int[]{24,17,25,27,4,-18,7,-18,9,-18,18,-18,32,-18,3,-18,5,-18,8,-18,10,-18});
    states[36] = new State(new int[]{32,20,30,21,31,22,17,23},new int[]{-5,37,-6,29,-2,19});
    states[37] = new State(new int[]{24,17,25,27,4,-19,7,-19,9,-19,18,-19,32,-19,3,-19,5,-19,8,-19,10,-19});
    states[38] = new State(new int[]{32,20,30,21,31,22,17,23},new int[]{-5,39,-6,29,-2,19});
    states[39] = new State(new int[]{24,17,25,27,4,-20,7,-20,9,-20,18,-20,32,-20,3,-20,5,-20,8,-20,10,-20});
    states[40] = new State(-5);
    states[41] = new State(-6);
    states[42] = new State(new int[]{32,20,30,21,31,22,17,23},new int[]{-1,43,-3,13,-4,14,-5,26,-6,29,-2,19});
    states[43] = new State(new int[]{32,20,3,4,5,42,8,46,10,52},new int[]{-8,44,-7,9,-2,10,-13,40,-9,41,-10,45,-11,51});
    states[44] = new State(-31);
    states[45] = new State(-7);
    states[46] = new State(new int[]{32,20,3,4,5,42,8,46,10,52},new int[]{-12,47,-8,50,-7,9,-2,10,-13,40,-9,41,-10,45,-11,51});
    states[47] = new State(new int[]{9,48,7,7});
    states[48] = new State(new int[]{32,20,30,21,31,22,17,23},new int[]{-1,49,-3,13,-4,14,-5,26,-6,29,-2,19});
    states[49] = new State(-11);
    states[50] = new State(-9);
    states[51] = new State(-8);
    states[52] = new State(new int[]{17,53});
    states[53] = new State(new int[]{32,20,30,21,31,22,17,23},new int[]{-1,54,-3,13,-4,14,-5,26,-6,29,-2,19});
    states[54] = new State(new int[]{18,55});
    states[55] = new State(new int[]{3,56});
    states[56] = new State(new int[]{32,20,3,4,5,42,8,46,10,52},new int[]{-12,57,-8,50,-7,9,-2,10,-13,40,-9,41,-10,45,-11,51});
    states[57] = new State(new int[]{4,58,7,7});
    states[58] = new State(-12);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-15, new int[]{-14,2});
    rules[2] = new Rule(-14, new int[]{-13});
    rules[3] = new Rule(-13, new int[]{3,-12,4});
    rules[4] = new Rule(-8, new int[]{-7});
    rules[5] = new Rule(-8, new int[]{-13});
    rules[6] = new Rule(-8, new int[]{-9});
    rules[7] = new Rule(-8, new int[]{-10});
    rules[8] = new Rule(-8, new int[]{-11});
    rules[9] = new Rule(-12, new int[]{-8});
    rules[10] = new Rule(-12, new int[]{-12,7,-8});
    rules[11] = new Rule(-10, new int[]{8,-12,9,-1});
    rules[12] = new Rule(-11, new int[]{10,17,-1,18,3,-12,4});
    rules[13] = new Rule(-2, new int[]{32});
    rules[14] = new Rule(-7, new int[]{-2,6,-1});
    rules[15] = new Rule(-1, new int[]{-3});
    rules[16] = new Rule(-3, new int[]{-4});
    rules[17] = new Rule(-3, new int[]{-4,26,-5});
    rules[18] = new Rule(-3, new int[]{-4,27,-5});
    rules[19] = new Rule(-3, new int[]{-4,29,-5});
    rules[20] = new Rule(-3, new int[]{-4,28,-5});
    rules[21] = new Rule(-4, new int[]{-5});
    rules[22] = new Rule(-4, new int[]{-4,22,-5});
    rules[23] = new Rule(-4, new int[]{-4,23,-5});
    rules[24] = new Rule(-5, new int[]{-6});
    rules[25] = new Rule(-5, new int[]{-5,24,-6});
    rules[26] = new Rule(-5, new int[]{-5,25,-6});
    rules[27] = new Rule(-6, new int[]{-2});
    rules[28] = new Rule(-6, new int[]{30});
    rules[29] = new Rule(-6, new int[]{31});
    rules[30] = new Rule(-6, new int[]{17,-1,18});
    rules[31] = new Rule(-9, new int[]{5,-1,-8});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // progr -> block
{ root = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 3: // block -> BEGIN, stlist, END
{ CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-2].blVal; }
        break;
      case 4: // statement -> assign
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 5: // statement -> block
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 6: // statement -> cycle
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 7: // statement -> repeat
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 8: // statement -> while
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 9: // stlist -> statement
{ 
				CurrentSemanticValue.blVal = new BlockNode(ValueStack[ValueStack.Depth-1].stVal); 
			}
        break;
      case 10: // stlist -> stlist, SEMICOLON, statement
{ 
				ValueStack[ValueStack.Depth-3].blVal.Add(ValueStack[ValueStack.Depth-1].stVal); 
				CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-3].blVal; 
			}
        break;
      case 11: // repeat -> REPEAT, stlist, UNTIL, expr
{
				CurrentSemanticValue.stVal = new RepeatNode(ValueStack[ValueStack.Depth-3].blVal as BlockNode, ValueStack[ValueStack.Depth-1].eVal as ExprNode);
			}
        break;
      case 12: // while -> WHILE, OPENP, expr, CLOSEP, BEGIN, stlist, END
{
				CurrentSemanticValue.stVal = new WhileNode(ValueStack[ValueStack.Depth-5].eVal as ExprNode, ValueStack[ValueStack.Depth-2].blVal as BlockNode);
			}
        break;
      case 13: // ident -> ID
{ CurrentSemanticValue.eVal = new IdNode(ValueStack[ValueStack.Depth-1].sVal); }
        break;
      case 14: // assign -> ident, ASSIGN, expr
{ CurrentSemanticValue.stVal = new AssignNode(ValueStack[ValueStack.Depth-3].eVal as IdNode, ValueStack[ValueStack.Depth-1].eVal); }
        break;
      case 15: // expr -> e0
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as ExprNode; }
        break;
      case 16: // e0 -> e1
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as ExprNode; }
        break;
      case 17: // e0 -> e1, LT, e2
{ CurrentSemanticValue.eVal = new BinaryOperation(ValueStack[ValueStack.Depth-3].eVal as ExprNode,ValueStack[ValueStack.Depth-1].eVal as ExprNode, OpType.LT);}
        break;
      case 18: // e0 -> e1, GT, e2
{ CurrentSemanticValue.eVal = new BinaryOperation(ValueStack[ValueStack.Depth-3].eVal as ExprNode,ValueStack[ValueStack.Depth-1].eVal as ExprNode, OpType.GT);}
        break;
      case 19: // e0 -> e1, GEQ, e2
{ CurrentSemanticValue.eVal = new BinaryOperation(ValueStack[ValueStack.Depth-3].eVal as ExprNode,ValueStack[ValueStack.Depth-1].eVal as ExprNode, OpType.GEQ);}
        break;
      case 20: // e0 -> e1, LEQ, e2
{ CurrentSemanticValue.eVal = new BinaryOperation(ValueStack[ValueStack.Depth-3].eVal as ExprNode,ValueStack[ValueStack.Depth-1].eVal as ExprNode, OpType.LEQ);}
        break;
      case 21: // e1 -> e2
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as ExprNode; }
        break;
      case 22: // e1 -> e1, MINUS, e2
{ CurrentSemanticValue.eVal = new BinaryOperation(ValueStack[ValueStack.Depth-3].eVal as ExprNode,ValueStack[ValueStack.Depth-1].eVal as ExprNode, OpType.MINUS);}
        break;
      case 23: // e1 -> e1, PLUS, e2
{ CurrentSemanticValue.eVal = new BinaryOperation(ValueStack[ValueStack.Depth-3].eVal as ExprNode,ValueStack[ValueStack.Depth-1].eVal as ExprNode, OpType.PLUS);}
        break;
      case 24: // e2 -> e3
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as ExprNode; }
        break;
      case 25: // e2 -> e2, MULT, e3
{ CurrentSemanticValue.eVal = new BinaryOperation(ValueStack[ValueStack.Depth-3].eVal as ExprNode,ValueStack[ValueStack.Depth-1].eVal as ExprNode, OpType.MULT);}
        break;
      case 26: // e2 -> e2, DELIM, e3
{ CurrentSemanticValue.eVal = new BinaryOperation(ValueStack[ValueStack.Depth-3].eVal as ExprNode,ValueStack[ValueStack.Depth-1].eVal as ExprNode, OpType.DELIM);}
        break;
      case 27: // e3 -> ident
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as IdNode; }
        break;
      case 28: // e3 -> INUM
{ CurrentSemanticValue.eVal = new IntNumNode(ValueStack[ValueStack.Depth-1].iVal); }
        break;
      case 29: // e3 -> RNUM
{ CurrentSemanticValue.eVal = new DoubleNumNode(ValueStack[ValueStack.Depth-1].dVal); }
        break;
      case 30: // e3 -> OPENP, expr, CLOSEP
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-2].eVal as ExprNode; }
        break;
      case 31: // cycle -> CYCLE, expr, statement
{ CurrentSemanticValue.stVal = new CycleNode(ValueStack[ValueStack.Depth-2].eVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


}
}
